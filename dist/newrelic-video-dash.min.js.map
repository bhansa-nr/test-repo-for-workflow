{"version":3,"file":"newrelic-video-dash.min.js","mappings":"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","sources":["webpack://nrvideo/webpack/universalModuleDefinition","webpack://nrvideo/./src/index.js","webpack://nrvideo/./src/tracker.js","webpack://nrvideo/./node_modules/newrelic-video-core/src/backend.js","webpack://nrvideo/./node_modules/newrelic-video-core/src/log.js","webpack://nrvideo/./node_modules/newrelic-video-core/src/plugins/nrinsightsbackend.js","webpack://nrvideo/./node_modules/newrelic-video-core/src/core.js","webpack://nrvideo/./node_modules/newrelic-video-core/src/constants.js","webpack://nrvideo/./node_modules/newrelic-video-core/src/chrono.js","webpack://nrvideo/./node_modules/newrelic-video-core/src/emitter.js","webpack://nrvideo/./node_modules/newrelic-video-core/src/tracker.js","webpack://nrvideo/./node_modules/newrelic-video-core/src/videotrackerstate.js","webpack://nrvideo/./node_modules/newrelic-video-core/src/videotracker.js","webpack://nrvideo/webpack/bootstrap","webpack://nrvideo/webpack/runtime/define property getters","webpack://nrvideo/webpack/runtime/hasOwnProperty shorthand","webpack://nrvideo/webpack/runtime/make namespace object","webpack://nrvideo/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"nrvideo\"] = factory();\n\telse\n\t\troot[\"nrvideo\"] = factory();\n})(self, () => {\nreturn ","import * as nrvideo from \"newrelic-video-core\";\nimport Tracker from \"./tracker\";\n\nnrvideo.DashTracker = Tracker;\n\nmodule.exports = nrvideo;\n","import * as nrvideo from \"newrelic-video-core\";\nimport { version } from \"../package.json\";\n\nexport default class DashTracker extends nrvideo.VideoTracker {\n  setPlayer(player, tag) {\n    nrvideo.VideoTracker.prototype.setPlayer.call(this, player, tag);\n  }\n\n  getTrackerName() {\n    return \"dash\";\n  }\n\n  getTrackerVersion() {\n    return version;\n  }\n\n  isLive() {\n    return this.player.isDynamic();\n  }\n\n  getSrc() {\n    return this.player.getSource();\n  }\n\n  getPlayrate() {\n    return this.player.getPlaybackRate();\n  }\n\n  getDuration() {\n    // Returns the duration of the MPD in seconds\n    return this.player.duration();\n  }\n\n  getTrack() {\n    const track = this.player.getCurrentTrackFor(\"audio\");\n    return track;\n  }\n\n  getLanguage() {\n    const activeTrack = this.getTrack();\n    return activeTrack.lang ?? \"\";\n  }\n\n  getDashBitrate(type) {\n    // MediaPlayer == getQualityFor\n    /* \n      Gets the current download quality for media type video, audio or images. \n      For video and audio types the ABR rules update this value before every new download  \n      unless autoSwitchBitrate is set to fasle\n    */\n    const videoBitrate = this.player.getQualityFor(\"video\");\n\n    return this.player.getBitrateInfoListFor(\"video\")[videoBitrate];\n  }\n\n  getRenditionBitrate() {\n    const currentBitrate = this.getDashBitrate(\"video\");\n    return currentBitrate?.bitrate;\n  }\n\n  /* \n  Not able to find any field to show renditionName\n  getRenditionName() {\n    let qlty = this.getDashBitrate(\"video\");\n    return qlty?.label;\n  }\n  */\n\n  /** Override to return renidtion actual width (before re-scaling). */\n  getRenditionWidth() {\n    return this.getDashBitrate(\"video\")?.width;\n  }\n\n  /** Override to return renidtion actual height (before re-scaling). */\n  getRenditionHeight() {\n    return this.getDashBitrate(\"video\")?.height;\n  }\n\n  getPlayerVersion() {\n    return this.player.getVersion();\n  }\n\n  getPreload() {\n    return this.player.preload();\n  }\n\n  isMuted() {\n    return this.player.isMuted();\n  }\n\n  isAutoplayed() {\n    return this.player.getAutoPlay();\n  }\n\n  registerListeners() {\n    nrvideo.Log.debugCommonVideoEvents(this.player, [\n      null,\n      \"streamInitialized\",\n      \"playbackMetaDataLoaded\",\n      \"playbackLoadedData\",\n      \"canPlay\",\n      \"playbackPlaying\",\n      \"playbackPaused\",\n      \"playbackSeeking\",\n      \"playbackSeeked\",\n      \"error\",\n      \"playbackEnded\",\n      \"bufferStalled\",\n      \"bufferLoaded\",\n      \"qualityChangeRendered\",\n    ]);\n\n    this.player.on(\"streamInitialized\", this.onReady.bind(this));\n    this.player.on(\"playbackMetaDataLoaded\", this.onDownload.bind(this));\n    this.player.on(\"playbackLoadedData\", this.onDownload.bind(this));\n    this.player.on(\"canPlay\", this.onPlay.bind(this));\n    this.player.on(\"playbackPlaying\", this.onPlaying.bind(this));\n    this.player.on(\"playbackPaused\", this.onPause.bind(this));\n    this.player.on(\"playbackSeeking\", this.onSeeking.bind(this));\n    this.player.on(\"playbackSeeked\", this.onSeeked.bind(this));\n    this.player.on(\"error\", this.onError.bind(this));\n    this.player.on(\"playbackError\", this.onError.bind(this));\n    this.player.on(\"playbackEnded\", this.onEnded.bind(this));\n    this.player.on(\"bufferStalled\", this.onBufferingStalled.bind(this));\n    this.player.on(\"bufferLoaded\", this.onBufferingLoaded.bind(this));\n    this.player.on(\"qualityChangeRendered\", this.onAdaptation.bind(this));\n  }\n\n  unregisterListeners() {\n    this.player.off(\"streamInitialized\", this.onReady);\n    this.player.off(\"playbackMetaDataLoaded\", this.onDownload);\n    this.player.off(\"playbackLoadedData\", this.onDownload);\n    this.player.off(\"canPlay\", this.onPlay);\n    this.player.off(\"playbackPlaying\", this.onPlaying);\n    this.player.off(\"playbackPaused\", this.onPause);\n    this.player.off(\"playbackSeeking\", this.onSeeking);\n    this.player.off(\"playbackSeeked\", this.onSeeked);\n    this.player.off(\"playbackError\", this.onError);\n    this.player.off(\"error\", this.onError);\n    this.player.off(\"playbackEnded\", this.onEnded);\n    this.player.off(\"bufferStalled\", this.onBufferingStalled);\n    this.player.off(\"bufferLoaded\", this.onBufferingLoaded);\n    this.player.off(\"qualityChangeRendered\", this.onAdaptation);\n  }\n\n  onReady() {\n    this.sendPlayerReady();\n  }\n\n  onDownload(e) {\n    this.sendDownload({ state: e.type });\n  }\n\n  onPlay() {\n    this.sendRequest();\n  }\n\n  onPlaying() {\n    this.sendResume();\n    this.sendStart();\n  }\n\n  onAdaptation() {\n    this.sendRenditionChanged();\n  }\n\n  onBufferingStalled() {\n    this.sendBufferStart();\n  }\n\n  onBufferingLoaded() {\n    this.sendBufferEnd();\n  }\n\n  onPause() {\n    this.sendPause();\n  }\n\n  onSeeking() {\n    this.sendSeekStart();\n  }\n\n  onSeeked() {\n    this.sendSeekEnd();\n  }\n\n  onError(e) {\n    this.sendError(e.error.message);\n  }\n\n  onEnded() {\n    this.sendEnd();\n  }\n}\n","/**\n * Backend class provides the basic logic to create event backends.\n * This class is intended to be subclassed, not directly used.\n * \n * @class Backend\n */\nclass Backend {\n\n    constructor() {\n        /**\n         * Custom attributes\n         * @private\n         */\n        this._attributes = {}\n    }\n\n    /**\n     * Sends given event (to be overwritten by a subclass).\n     * @param {String} event Event to send.\n     * @param {Object} data Data associated to the event.\n     */\n    send(event, data) {\n        data = Object.assign(data || {}, this._attributes)\n    }\n\n    /**\n     * Store custom attribute.\n     * @param {String} key Attribute name.\n     * @param {Object} value Attribute value.\n     */\n    setAttribute(key, value) {\n        this._attributes[key] = value\n    }\n\n    /**\n     * Store custom attribute list.\n     * @param {Object} attr Attributes.\n     */\n    setAttributes(attr) {\n        this._attributes.append(attr)\n    }\n}\n\nexport default Backend","/**\n * Static Log class\n *\n * @class\n * @static\n */\nclass Log {\n   /**\n   * Sends an error console log.\n   * @param {...any} [msg] Message to show\n   * @static\n   */\n  static error (...msg) {\n    _report(msg, Log.Levels.ERROR, 'darkred')\n  }\n\n  /**\n   * Sends a warning console log.\n   * @method Log.warn\n   * @static\n   * @param {...any} msg Message to show\n   */\n  static warn (...msg) {\n    _report(msg, Log.Levels.WARNING, 'darkorange')\n  }\n\n  /**\n   * Sends a notice console log.\n   * @method Log.notice\n   * @static\n   * @param {...any} msg Message to show\n   */\n  static notice (...msg) {\n    _report([].slice.call(arguments), Log.Levels.NOTICE, 'darkcyan')\n  }\n\n  /**\n   * Sends a debug message to console.\n   * @method Log.debug\n   * @static\n   * @param {...any} msg Message to show\n   */\n  static debug (...msg) {\n    _report(msg, Log.Levels.DEBUG, 'indigo')\n  }\n\n  /**\n   * This utility method will add most of the HTML5 common event listeners to the player sent.\n   * Events will be reported as DEBUG level messages.\n   *\n   * @example\n   * // Already included events:\n   * ['canplay', 'buffering', 'waiting', 'ended', 'play', 'playing', 'pause', 'resume', 'error',\n   * 'abort', 'seek', 'seeking', 'seeked', 'stalled', 'dispose', 'loadeddata', 'loadstart',\n   * 'loadedmetadata']\n   *\n   * @method Log.debugCommonVideoEvents\n   * @static\n   * @param {object|function} o Object to attach the events.\n   * @param {array} [extraEvents]\n   * An array of extra events to watch. ie:  ['timeupdate', 'progress'].\n   * If the first item is null, no common events will be added.\n   * @param {function} [report] Callback function called to report events.\n   * Default calls Log.debug()\n   */\n  static debugCommonVideoEvents (o, extraEvents, report) {\n    try {\n      if (Log.level <= Log.Levels.DEBUG) {\n        report = report || function (e) {\n          Log.debug('Event: ' + e.type)\n        }\n\n        var playerEvents = [\n          'canplay', 'buffering', 'waiting', 'ended', 'play', 'playing',\n          'pause', 'resume', 'error', 'abort', 'seek', 'seeking', 'seeked',\n          'stalled', 'dispose', 'loadeddata', 'loadstart', 'loadedmetadata'\n        ]\n        if (extraEvents) {\n          if (extraEvents[0] === null) {\n            extraEvents.shift()\n            playerEvents = extraEvents\n          } else {\n            playerEvents = playerEvents.concat(extraEvents)\n          }\n        }\n\n        for (var i = 0; i < playerEvents.length; i++) {\n          if (typeof o === 'function') {\n            o.call(window, playerEvents[i], report)\n          } else if (o.on) {\n            o.on(playerEvents[i], report)\n          } else if (o.addEventListener) {\n            o.addEventListener(playerEvents[i], report)\n          } else if (o.addEventHandler) {\n            o.addEventHandler(playerEvents[i], report)\n          } else {\n            Log.warn('debugCommonVideoEvents: No common listener function found for ', o)\n          }\n        }\n      }\n    } catch (err) {\n      Log.warn(err)\n    }\n  }\n}\n\n/**\n * Enum for log levels\n * @enum {integer}\n * @static\n * @var\n */\nLog.Levels = {\n    /** No console outputs */\n  SILENT: 5,\n    /** Console will show errors */\n  ERROR: 4,\n    /** Console will show warnings */\n  WARNING: 3,\n    /** Console will show notices (ie: life-cyrcle logs) */\n  NOTICE: 2,\n    /** Console will show debug messages. */\n  DEBUG: 1,\n    /** Show all messages. */\n  ALL: 0\n}\n\n  /**\n   * Only logs of this imporance or higher will be shown.\n   * @example Log.level = Log.Levels.ALL\n   * @default Log.Levels.ERROR\n   * @static\n   */\nLog.level = Log.Levels.ERROR\n\n  /**\n   * If true, logs will be outputed with colors.\n   * @default true\n   * @static\n   */\nLog.colorful = true\n\n  /**\n   * If true, logs will include the time mark.\n   * @default true\n   * @static\n   */\nLog.includeTime = true\n\n  /**\n   * Prefix included at the start of every log.\n   * @default '[New Relic]'\n   * @static\n   */\nLog.prefix = '[nrvideo]'\n\n// PRIVATE MEMBERS\n\n/**\n * Returns a console message\n *\n * @private\n * @param {array} msg Message array, error object or array of messages.\n * @param {Log.Level} [level=Log.Levels.NOTICE] Defines the level of the error sent.\n * Only errors with higher or equal level than Log.logLevel will be displayed.\n * @param {string} [color='darkgreen'] Color of the header\n * @see {@link Log.level}\n */\nfunction _report (msg, level, color) {\n  level = level || Log.Levels.NOTICE\n  color = color || 'darkcyan'\n\n  var prefix = Log.prefix\n  if (Log.includeTime) prefix += _getCurrentTime() + ' '\n  prefix += _level2letter(level) + ':'\n\n  // Show messages in actual console if level is enought\n  if (Log.level <= level && level !== Log.Levels.SILENT) {\n    if (!Log.colorful || (typeof document !== 'undefined' && document.documentMode)) {\n      // document.documentMode exits only in IE\n      _plainReport(msg, prefix)\n    } else {\n      // choose log method\n      var logMethod\n      if (level === Log.Levels.ERROR && console.error) {\n        logMethod = console.error\n      } else if (level === Log.Levels.WARNING && console.warn) {\n        logMethod = console.warn\n      } else if (level === Log.Levels.DEBUG && console.debug) {\n        // NOTE: for some reason console.debug doesn't work on CAF Receivers.\n        if (window.cast == undefined) {\n          logMethod = console.debug\n        } else {\n          logMethod = console.log\n        }\n      } else {\n        logMethod = console.log\n      }\n\n      // print message\n      prefix = '%c' + prefix\n      msg.splice(0, 0, prefix, 'color: ' + color)\n      logMethod.apply(console, msg)\n    }\n  }\n}\n\n/**\n * Returns the current time in format hh:mm:ss.mmm (with trailing 0s)\n * @private\n * @return {string} Current time.\n */\nfunction _getCurrentTime () {\n  var d = new Date()\n  var hh = ('0' + d.getDate()).slice(-2)\n  var mm = ('0' + d.getMinutes()).slice(-2)\n  var ss = ('0' + d.getSeconds()).slice(-2)\n  var mmm = ('00' + d.getMilliseconds()).slice(-3)\n  return '[' + hh + ':' + mm + ':' + ss + '.' + mmm + ']'\n}\n\n/**\n * Returns a console message without style\n *\n * @private\n * @param {(string|object|array)} msg Message string, object or array of messages.\n * @param {string} prefix Prefix of the message.\n */\nfunction _plainReport (msg, prefix) {\n  if (msg instanceof Array) {\n    for (var m in msg) {\n      _plainReport(msg[m], prefix)\n    }\n  } else {\n    if (typeof msg === 'string') {\n      console.log(prefix + ' ' + msg)\n    } else {\n      console.log(prefix + '↵')\n      console.log(msg)\n    }\n  }\n}\n\nconst _letters = {\n  4: 'e', // Error\n  3: 'w', // Warning\n  2: 'n', // Notice\n  1: 'd' // Debug\n}\n\n/**\n * Transforms a level to a letter to identify every message.\n *\n * @private\n * @param {sLog.Level} level Level of the message\n */\nfunction _level2letter (level) {\n  return _letters[level]\n}\n\n/**\n * This function is automatically executed at load.\n * Will search inside window.location.search for attribute 'nrvideo-debug=X'.\n * X can have one of these values, that will modify Log.Levels.\n * 5: SILENT,\n * 4: ERROR,\n * 3: WARNING,\n * 2: NOTICE,\n * 1: DEBUG,\n *\n * If nrvideo-colors=false is present, Log.colorful will be set to false.\n *\n * @private\n */\nfunction _loadLevelFromUrl () {\n  if (typeof window !== 'undefined' && window.location && window.location.search) {\n    var m = /\\?.*&*nrvideo-debug=(.+)/i.exec(window.location.search)\n    if (m !== null) {\n      if (m[1] === 'true') {\n        Log.level = Log.Levels.ALL\n      } else {\n        Log.level = m[1]\n      }\n    }\n\n    var m2 = /\\?.*&*nrvideo-colors=false/i.exec(window.location.search)\n    if (m2 !== null) {\n      Log.colorful = false\n    }\n  }\n}\n\n// Execute load level\n_loadLevelFromUrl()\n\nexport default Log\n","import Backend from '../backend'\nimport Log from '../log'\n\n/**\n * Implements a New Relic Insights API backend. For a description of what is a Backend, see {@link Backend}.\n * It must be initialized using a New Relic Account ID and an Insights API insert key.\n *\n * @example\n * let backend = new nrvideo.NRInsightsBackend(\"ACCOUNT ID\", \"API KEY\")\n * nrvideo.Core.setBackend(backend)\n *\n * @extends Backend\n */\nclass NRInsightsBackend extends Backend {\n    /**\n     * Constructor, receives account ID, API Key and (optionally) an event type.\n     *\n     * @param {String} [accountId] Insights Account ID.\n     * @param {String} [apiKey] Insights API Key.\n     * @param {String} [eventType] Insights event type. Default 'BrowserVideo'.\n     */\n    constructor(accountId, apiKey, eventType = 'BrowserVideo') {\n        super()\n\n        /**\n         * Insights account ID.\n         * @private\n         */\n        this._accountId = accountId\n\n        /**\n         * Insights API Key.\n         * @private\n         */\n        this._apiKey = apiKey\n\n        /**\n         * Insights event type.\n         * @private\n         */\n        this._eventType = eventType\n\n        /**\n         * Buffer to store events.\n         * @private\n         */\n        this._eventBuffer = []\n\n        /**\n         * Harvest timer lock.\n         * @private\n         */\n        this._harvestLocked = false\n\n        /**\n         * Last timestamp.\n         * @private\n         */\n        this._lastTimestamp = 0\n\n        // Define harvest timer handler\n        setInterval(() => { this.harvestHandler(NRInsightsBackend.Source.TIMER) }, 10000)\n    }\n\n    send(event, data) {\n        super.send(event, data)\n        if (this._eventBuffer.length < 500) {\n            data = this.generateAttributes(data)\n            data['eventType'] = this._eventType\n            data['actionName'] = event\n            // Mechanism to avoid having two events with the same timestamp\n            let timestamp = Date.now()\n            if (timestamp > this._lastTimestamp) {\n                data['timestamp'] = timestamp\n                this._lastTimestamp = timestamp\n            }\n            else {\n                this._lastTimestamp ++\n                data['timestamp'] = this._lastTimestamp\n            }\n            this._eventBuffer.push(data)\n        }\n    }\n\n    generateAttributes(data) {\n        data['pageUrl'] = window.location.href\n        data['currentUrl'] = window.location.origin + window.location.pathname\n        data['referrerUrl'] = document.referrer\n\n        let OSName = \"Unknown\"\n        if (navigator.userAgent.indexOf(\"Win\") != -1) OSName = \"Windows\"\n        else if (navigator.userAgent.indexOf(\"Android\") != -1) OSName = \"Android\"\n        else if (navigator.userAgent.indexOf(\"Mac\") != -1) OSName = \"Mac\"\n        else if (navigator.userAgent.match(/iPhone|iPad|iPod/i)) OSName = \"iOS\"\n        else if (navigator.userAgent.indexOf(\"Linux\") != -1) OSName = \"Linux\"\n        else if (navigator.userAgent.indexOf(\"X11\") != -1) OSName = \"UNIX\"\n        data['userAgentOS'] = OSName\n\n        let agentName = \"Unknown\"\n        if (navigator.userAgent.indexOf(\"Chrome\") != -1 ) agentName = \"Chrome\"\n        else if (navigator.userAgent.indexOf(\"Firefox\") != -1 ) agentName = \"Firefox\"\n        else if (navigator.userAgent.indexOf(\"MSIE\") != -1 ) agentName = \"IE\"\n        else if (navigator.userAgent.indexOf(\"Edge\") != -1 ) agentName = \"Microsoft Edge\"\n        else if (navigator.userAgent.indexOf(\"Safari\") != -1 ) agentName = \"Safari\"\n        else if (navigator.userAgent.indexOf(\"Opera\") != -1 ) agentName = \"Opera\"\n        data['userAgentName'] = agentName\n\n        let deviceType = \"Unknown\"\n        if (navigator.userAgent.match(/Tablet|iPad/i)) deviceType = \"Tablet\"\n        else if (navigator.userAgent.match(/Mobile|Windows Phone|Lumia|Android|webOS|iPhone|iPod|Blackberry|PlayBook|BB10|Opera Mini|\\bCrMo\\/|Opera Mobi/i)) deviceType = \"Mobile\"\n        else if (window.cast != undefined) deviceType = \"Cast\"\n        else deviceType = \"Desktop\"\n        data['deviceType'] = deviceType\n\n        return data\n    }\n\n    harvestHandler(source) {\n        if (source == NRInsightsBackend.Source.TIMER && this._harvestLocked) {\n            Log.debug(\"Harvest still locked, abort\")\n            return\n        }\n\n        this._harvestLocked = true\n\n        if (this._eventBuffer.length > 0) {\n            Log.debug(\"Push events to Insights = \", this._eventBuffer)\n            this.pushEventToInsights(this._eventBuffer.pop())\n        }\n        else {\n            this._harvestLocked = false\n        }\n    }\n\n    pushEventToInsights(ev) {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json', 'X-Insert-Key': this._apiKey },\n            body: JSON.stringify(ev)\n        }\n\n        const url = \"https://insights-collector.newrelic.com/v1/accounts/\" + this._accountId + \"/events\"\n        fetch(url, requestOptions)\n            .then(response => response.json())\n            .then(data => this.insightsRequestResponse(data))\n            .catch((error) => {\n                Log.error('Error:', error, ev);\n                // Put back the event and abort current fetch process\n                this._eventBuffer.push(ev)\n                this._harvestLocked = false\n            });\n    }\n\n    insightsRequestResponse(data) {\n        // Send next event\n        this.harvestHandler(NRInsightsBackend.Source.FETCH)\n    }\n}\n\nNRInsightsBackend.Source = {\n    TIMER: \"TIMER\",\n    FETCH: \"FETCH\"\n}\n\nexport default NRInsightsBackend\n","import Log from './log'\nimport Backend from './backend'\n\n/**\n * Static class that sums up core functionalities of the library.\n * @static\n */\nclass Core {\n  /**\n   * Add a tracker to the system. Trackers added will start reporting its events to NR's backend.\n   *\n   * @param {(Emitter|Tracker)} tracker Tracker instance to add.\n   */\n  static addTracker (tracker) {\n    if (tracker.on && tracker.emit) {\n      trackers.push(tracker)\n      tracker.on('*', eventHandler)\n      if (typeof tracker.trackerInit == 'function') { \n        tracker.trackerInit(); \n      }\n    } else {\n      Log.error('Tried to load a non-tracker.', tracker)\n    }\n  }\n\n  /**\n   * Disposes and remove given tracker. Removes its listeners.\n   *\n   * @param {Tracker} tracker Tracker to remove.\n   */\n  static removeTracker (tracker) {\n    tracker.off('*', eventHandler)\n    tracker.dispose()\n    let index = trackers.indexOf(tracker)\n    if (index !== -1) trackers.splice(index, 1)\n  }\n\n  /**\n   * Returns the array of trackers.\n   *\n   * @returns {Tracker[]} Array of trackers.\n   */\n  static getTrackers () {\n    return trackers\n  }\n\n  /**\n   * Returns the current backend.\n   *\n   * @returns {Backend} The current backend.\n   */\n  static getBackend() {\n    return backend\n  }\n\n  /**\n   * Sets the current backend.\n   * @param {Backend} backendInstance Backend instance.\n   */\n  static setBackend(backendInstance) {\n      backend = backendInstance\n  }\n\n  /**\n   * Sends given event using the appropriate backend.\n   * @param {String} event Event to send.\n   * @param {Object} data Data associated to the event.\n   */\n  static send(event, data) {\n    if (Core.getBackend() == undefined || !(Core.getBackend() instanceof Backend)) {\n        // Use the default backend (NR Agent)\n        if (typeof newrelic !== 'undefined' && newrelic.addPageAction) {\n            newrelic.addPageAction(event, data)\n        } else {\n            if (!isErrorShown) {\n                Log.error(\n                    'newrelic.addPageAction() is not available.',\n                    'In order to use NewRelic Video you will need New Relic Browser Agent.'\n                )\n                isErrorShown = true\n            }\n        }\n    }\n    else {\n        // Use the user-defined backend\n        Core.getBackend().send(event, data)\n    }\n  }\n\n  /**\n   * Sends an error event. This may be used for external errors launched by the app, the network or\n   * any external factor. Note that errors within the player are normally reported with\n   * tracker.sendError, so this method should not be used to report those.\n   *\n   * @param {object} att attributes to be sent along the error.\n   */\n  static sendError (att) {\n    Core.send('ERROR', att)\n  }\n}\n\nlet trackers = []\nlet backend;\nlet isErrorShown = false\n\n/**\n * Logs and sends given event.\n *\n * @private\n * @param {Event} e Event\n */\nfunction eventHandler (e) {\n  let data = cleanData(e.data)\n  if (Log.level <= Log.Levels.DEBUG) {\n    Log.notice('Sent', e.type, data)\n  } else {\n    Log.notice('Sent', e.type)\n  }\n  Core.send(e.type, data)\n}\n\n/**\n * Cleans given object, removing all items with value === null.\n * @private\n * @param {Object} data Data to clean\n * @returns {Object} Cleaned object\n */\nfunction cleanData (data) {\n  let ret = {}\n  for (let i in data) {\n    if (data[i] !== null && typeof data[i] !== 'undefined') ret[i] = data[i]\n  }\n  return ret\n}\n\nexport default Core\n","/**\n * Constants for the library.\n * @class Constants\n * @static\n */\nclass Constants {}\n\n/**\n * Enum for types/positions of ads.\n * @example var type = Constants.AdPositions.PRE\n * @enum {String}\n */\nConstants.AdPositions = {\n  /** For ads shown before the content. */\n  PRE: 'pre',\n  /** For ads shown during the content. */\n  MID: 'mid',\n  /** For ads shown after the content. */\n  POST: 'post'\n}\n\nexport default Constants\n","/**\n * This class calculates time lapses between two points on time.\n */\nclass Chrono {\n  /**\n   * Constructor\n   */\n  constructor () {\n    this.reset()\n  }\n\n  /** Reset chrono values. */\n  reset () {\n    /** Start time */\n    this.startTime = 0\n\n    /** Stop time */\n    this.stopTime = 0\n\n    /**\n     * If you set an offset in a chrono, its value will be added getDeltaTime and stop.\n     *\n     * @example\n     * let chrono = new Chrono()\n     * chrono.offset = 500\n     * chrono.start()\n     * process.sleep(500)\n     * chrono.stop() // Will return 1000\n     *\n     * @type {number}\n     */\n    this.offset = 0\n  }\n\n  /**\n   * Returns the time between start() and the last stop() in ms. Returns null if start wasn't\n   * called.\n   * @return {(number|null)} Time lapse in ms.\n   */\n  getDeltaTime () {\n    if (this.startTime) {\n      return this.offset + (new Date().getTime() - this.startTime)\n    } else {\n      return null\n    }\n  }\n\n  /**\n   * Starts the chrono.\n   */\n  start () {\n    this.startTime = new Date().getTime()\n    this.stopTime = 0\n  }\n\n  /**\n   * Stops the timer and returns delta time.\n   * @return {(number|null)} Returns the delta time\n   */\n  stop () {\n    this.stopTime = new Date().getTime()\n    return this.getDeltaTime()\n  }\n\n  /**\n   * Creates a copy of the chrono.\n   * @returns {Chrono} Cloned chrono\n   */\n  clone () {\n    var chrono = new Chrono()\n    chrono.startTime = this.startTime\n    chrono.stopTime = this.stopTime\n    chrono.offset = this.offset\n    return chrono\n  }\n}\n\nexport default Chrono\n","/**\n * This base class implements a basic behavior of listeners and events. Extend this object to have\n * this feature built-in inside your classes.\n *\n * @class Emitter\n */\nclass Emitter {\n  /**\n   * Sets a listener to a given event. Use {@link emit} to trigger those events.\n   * Pass '*' to listen ALL events.\n   *\n   * @param {string} event Name of the event.\n   * @param {function} callback Callback of the event. Receives event and data.\n   * @return this\n   */\n  on (event, callback) {\n    this._listeners = this._listeners || {}\n    if (typeof callback === 'function') {\n      this._listeners[event] = this._listeners[event] || []\n      this._listeners[event].push(callback)\n      return this\n    }\n  }\n\n  /**\n   * Removes given callback from the listeners of this object.\n   *\n   * @param {string} event Name of the event.\n   * @param {function} callback Callback of the event.\n   * @return this\n   */\n  off (event, callback) {\n    this._listeners = this._listeners || {}\n\n    if (this._listeners[event]) {\n      var index = this._listeners[event].indexOf(callback)\n      if (index !== -1) {\n        this._listeners[event].splice(index, 1)\n      }\n    }\n    return this\n  }\n\n  /**\n   * Emits given event, triggering all the associated callbacks.\n   *\n   * @param {string} event Name of the event.\n   * @param {object} [data] Custom data to be sent to the callbacks.\n   * @return this\n   */\n  emit (event, data) {\n    this._listeners = this._listeners || {}\n    data = data || {}\n\n    if (Array.isArray(this._listeners[event])) {\n      this._listeners[event].forEach((callback) => {\n        callback.call(this, { type: event, data: data, target: this })\n      })\n    }\n\n    if (Array.isArray(this._listeners['*'])) {\n      this._listeners['*'].forEach((callback) => {\n        callback.call(this, { type: event, data: data, target: this })\n      })\n    }\n\n    return this\n  }\n}\n\nexport default Emitter\n","import * as pkg from '../package.json'\nimport Emitter from './emitter'\nimport Chrono from './chrono'\n\n/**\n * Tracker class provides the basic logic to extend Newrelic's Browser Agent capabilities.\n * Trackers are designed to listen third party elements (like video tags, banners, etc.) and send\n * information over to Browser Agent. Extend this class to create your own tracker, override\n * registerListeners and unregisterListeners for full coverage!\n *\n * @example\n * Tracker instances should be added to Core library to start sending data:\n * nrvideo.Core.addTracker(new Tracker())\n *\n * @extends Emitter\n */\nclass Tracker extends Emitter {\n  /**\n   * Constructor, receives options. You should call {@see registerListeners} after this.\n   *\n   * @param {Object} [options] Options for the tracker. See {@link setOptions}.\n   */\n  constructor (options) {\n    super()\n\n    /**\n     * If you add something to this custom dictionary it will be added to every action. If you set\n     * any value, it will always override the values returned by the getters.\n     *\n     * @example\n     * If you define tracker.customData.contentTitle = 'a' and tracker.getTitle() returns 'b'.\n     * 'a' will prevail.\n     */\n    this.customData = {}\n\n    /**\n     * Set time between hearbeats, in ms.\n     */\n    this.heartbeat = null\n\n    /**\n     * Another Tracker instance. Useful to relate ad Trackers to their parent content Trackers.\n     * @type Tracker\n     */\n    this.parentTracker = null\n\n    /**\n     * Chrono that counts time since this class was instantiated.\n     * @private\n     */\n    this._trackerReadyChrono = new Chrono()\n    this._trackerReadyChrono.start()\n\n    options = options || {}\n    this.setOptions(options)\n  }\n\n  /**\n   * Set options for the Tracker.\n   *\n   * @param {Object} [options] Options for the tracker.\n   * @param {number} [options.heartbeat] Set time between heartbeats. See {@link heartbeat}.\n   * @param {Object} [options.customData] Set custom data. See {@link customData}.\n   * @param {Tracker} [options.parentTracker] Set parent tracker. See {@link parentTracker}.\n   */\n  setOptions (options) {\n    if (options) {\n      if (options.parentTracker) this.parentTracker = options.parentTracker\n      if (options.customData) this.customData = options.customData\n      if (options.heartbeat) this.heartbeat = options.heartbeat\n    }\n  }\n\n  /**\n   * Prepares tracker to dispose. Calls {@see unregisterListeners} and drops references.\n   */\n  dispose () {\n    this.unregisterListeners()\n  }\n\n  /**\n   * Override this method to register listeners to third party elements.\n   *\n   * @example\n   * class SpecificTracker extends Tracker {\n   *  registerListeners() {\n   *    this.player.on('play', () => this.playHandler)\n   *  }\n   *\n   *  playHandler() {\n   *    this.emit(Tracker.Events.REQUESTED)\n   *  }\n   * }\n   */\n  registerListeners () {}\n\n  /**\n   * Override this method to unregister listeners to third party elements created with\n   * {@see registerListeners}.\n   *\n   * @example\n   * class SpecificTracker extends Tracker {\n   *  registerListeners() {\n   *    this.player.on('play', () => this.playHandler)\n   *  }\n   *\n   *  unregisterListeners() {\n   *    this.player.off('play', () => this.playHandler)\n   *  }\n   *\n   *  playHandler() {\n   *    this.emit(Tracker.Events.REQUESTED)\n   *  }\n   * }\n   */\n  unregisterListeners () {}\n\n  /**\n   * Returns heartbeat time interval. 30000 (30s) if not set. See {@link setOptions}.\n   * @return {number} Heartbeat interval in ms.\n   * @final\n   */\n  getHeartbeat () {\n    if (this.heartbeat) {\n      return this.heartbeat\n    } else if (this.parentTracker && this.parentTracker.heartbeat) {\n      return this.parentTracker.heartbeat\n    } else {\n      return 30000\n    }\n  }\n\n  /**\n   * Starts heartbeating. Interval period set by options.heartbeat. Min 5000 ms.\n   * This method is automaticaly called by the tracker once sendRequest is called.\n   */\n  startHeartbeat () {\n    this._heartbeatInterval = setInterval(\n      this.sendHeartbeat.bind(this),\n      Math.max(this.getHeartbeat(), 5000)\n    )\n  }\n\n  /**\n   * Stops heartbeating. This method is automaticaly called by the tracker.\n   */\n  stopHeartbeat () {\n    if (this._heartbeatInterval) {\n      clearInterval(this._heartbeatInterval)\n    }\n  }\n\n  /**\n   * Heartbeating allows you to call this function each X milliseconds, defined by\n   * {@link getHeartbeat}. This is useful to send regular events to track changes.\n   *\n   * By default it will send {@link Tracker.Events.HEARTBEAT}.\n   * To start heartbeating use {@link startHeartbeat} and to stop them use {@link stopHeartbeat}.\n   *\n   * @example\n   * Override this method to define your own Heartbeat reporting.\n   *\n   * class TrackerChild extends Tracker {\n   *  sendHeartbeat (att) {\n   *    this.send('MY_HEARBEAT_EVENT')\n   *  }\n   * }\n   *\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   */\n  sendHeartbeat (att) {\n    this.send(Tracker.Events.HEARTBEAT, att)\n  }\n\n  /**\n   * Override this method to return attributes for actions.\n   *\n   * @example\n   * class SpecificTracker extends Tracker {\n   *  getAttributes(att) {\n   *    att = att || {}\n   *    att.information = 'something'\n   *    return att\n   *  }\n   * }\n   *\n   * @param {object} [att] Collection of key value attributes\n   * @return {object} Filled attributes\n   * @final\n   */\n  getAttributes (att) {\n    att = att || {}\n    att.trackerName = this.getTrackerName()\n    att.trackerVersion = this.getTrackerVersion()\n    att.coreVersion = pkg.version\n    att.timeSinceTrackerReady = this._trackerReadyChrono.getDeltaTime()\n\n    for (let key in this.customData) {\n      att[key] = this.customData[key]\n    }\n\n    if (document.hidden != undefined) {\n      att.isBackgroundEvent = document.hidden\n    }\n\n    return att\n  }\n\n  /** Override to change of the Version of tracker. ie: '1.0.1' */\n  getTrackerVersion () {\n    return pkg.version\n  }\n\n  /** Override to change of the Name of the tracker. ie: 'custom-html5' */\n  getTrackerName () {\n    return 'base-tracker'\n  }\n\n  /**\n   * Send given event. Will automatically call {@see getAttributes} to fill information.\n   * Internally, this will call {@see Emitter#emit}, so you could listen any event fired.\n   *\n   * @example\n   * tracker.send('BANNER_CLICK', { url: 'http....' })\n   *\n   * @param {string} event Event name\n   * @param {object} [att] Key:value dictionary filled with attributes.\n   */\n  send (event, att) {\n    this.emit(event, this.getAttributes(att))\n  }\n}\n\n/**\n * Enumeration of events fired by this class.\n *\n * @static\n * @memberof Tracker\n * @enum {string}\n */\nTracker.Events = {\n  /** The heartbeat event is sent once every 30 seconds while the video is playing. */\n  HEARTBEAT: 'HEARTBEAT'\n}\n\nexport default Tracker\n","import Chrono from './chrono'\nimport Log from './log'\n\n/**\n * State machine for a VideoTracker and its monitored video.\n */\nclass VideoTrackerState {\n  /** Constructor */\n  constructor () {\n    this.reset()\n\n    /**\n     * Time when the VideoTrackerState was initializated.\n     * @private\n     */\n    this._createdAt = Date.now()\n  }\n\n  /** Resets all flags and chronos. */\n  reset () {\n    /**\n     * Unique identifier of the view.\n     * @private\n     */\n    this._viewSession = null\n\n    /**\n     * Number of views seen.\n     * @private\n     */\n    this._viewCount = 0\n\n    /**\n     * True if it is tracking ads.\n     * @private\n     */\n    this._isAd = false\n\n    /**\n     * Number of errors fired. 'End' resets it.\n     */\n    this.numberOfErrors = 0\n\n    /**\n     * Number of ads shown.\n     */\n    this.numberOfAds = 0\n\n    /**\n     * Number of videos played.\n     */\n    this.numberOfVideos = 0\n\n    /**\n     * The amount of ms the user has been watching content (not paused, not buffering, not ads...)\n     */\n    this.totalPlaytime = 0\n\n    /**\n     * The amount of ms the user has been watching ads during an ad break.\n     */\n     this.totalAdPlaytime = 0\n\n    /** True if you are in the middle of an ad break. */\n    this.isAdBreak = false\n\n    /** True if initial buffering event already happened. */\n    this.initialBufferingHappened = false\n\n    this.resetFlags()\n    this.resetChronos()\n  }\n\n  /** Resets flags. */\n  resetFlags () {\n    /** True once the player has finished loading. */\n    this.isPlayerReady = false\n\n    /** True if the video has been user-requested to play. ie: user cicks play. */\n    this.isRequested = false\n\n    /** True if the video has starting playing. ie: actual images/audio showing in screen. */\n    this.isStarted = false\n\n    /** True if the video is paused. */\n    this.isPaused = false\n\n    /** True if the video is performing a seek action. */\n    this.isSeeking = false\n\n    /** True if the video is currently buffering. */\n    this.isBuffering = false\n\n    /** True if the video is currently playing (not buffering, not paused...) */\n    this.isPlaying = false\n  }\n\n  /** Resets chronos. */\n  resetChronos () {\n    /** Chrono that counts time since last requested event. */\n    this.timeSinceRequested = new Chrono()\n\n    /** Chrono that counts time since last start event. */\n    this.timeSinceStarted = new Chrono()\n\n    /** Chrono that counts time since last pause event. */\n    this.timeSincePaused = new Chrono()\n\n    /** Chrono that counts time since last seeking start event. */\n    this.timeSinceSeekBegin = new Chrono()\n\n    /** Chrono that counts time since last buffering start event. */\n    this.timeSinceBufferBegin = new Chrono()\n\n    /** Chrono that counts time since last ad break start event. */\n    this.timeSinceAdBreakStart = new Chrono()\n\n    /** Chrono that counts time since last download event. */\n    this.timeSinceLastDownload = new Chrono()\n\n    /** Chrono that counts time since last heartbeat. */\n    this.timeSinceLastHeartbeat = new Chrono()\n\n    /** Chrono that counts time since last rendition change. */\n    this.timeSinceLastRenditionChange = new Chrono()\n\n    /** Ads only. Chrono that counts time since last ad quartile. */\n    this.timeSinceLastAdQuartile = new Chrono()\n\n    /** Content only. Chrono that counts time since last AD_END. */\n    this.timeSinceLastAd = new Chrono()\n\n    /** Chrono that counts time since last *_RESUME. Only for buffering events. */\n    this.timeSinceResumed = new Chrono()\n\n    /** Chrono that counts time since last *_SEEK_END. Only for buffering events. */\n    this.timeSinceSeekEnd = new Chrono()\n\n    /** Chrono that counts the ammount of time the video have been playing since the last event. */\n    this.playtimeSinceLastEvent = new Chrono()\n\n    /** A dictionary containing the custom timeSince attributes. */\n    this.customTimeSinceAttributes = {}\n  }\n\n  /** Returns true if the tracker is currently on ads. */\n  isAd () {\n    return this._isAd\n  }\n\n  /** Sets if the tracker is currenlty tracking ads */\n  setIsAd (isAd) {\n    this._isAd = isAd\n  }\n\n  /**\n   * Set the Chrono for the custom attribute\n   * \n   * @param {object} name Time since attribute name.\n   */\n  setTimeSinceAttribute (name) {\n    this.customTimeSinceAttributes[name] = new Chrono()\n    this.customTimeSinceAttributes[name].start()\n  }\n\n  /**\n   * Delete a time since attribute\n   * \n   * @param {object} name Time since attribute name.\n   */\n  removeTimeSinceAttribute (name) {\n    delete this.customTimeSinceAttributes[name]\n  }\n\n  /**\n   * Returns a random-generated view Session ID, useful to sort by views.\n   */\n  getViewSession () {\n    if (!this._viewSession) {\n      let time = new Date().getTime()\n      let random = Math.random().toString(36).substring(2) + Math.random().toString(36).substring(2)\n\n      this._viewSession = time + '-' + random\n    }\n\n    return this._viewSession\n  }\n\n  /**\n   * Returns a random-generated view Session ID, plus a view count, allowing you to distinguish\n   * between two videos played in the same session.\n   */\n  getViewId () {\n    return this.getViewSession() + '-' + this._viewCount\n  }\n\n  /**\n   * Fills given object with state-based attributes.\n   *\n   * @param {object} att Collection fo key value attributes\n   * @return {object} Filled attributes\n   */\n  getStateAttributes (att) {\n    att = att || {}\n\n    if (this.isAd()) { // Ads only\n      if (this.isRequested) {\n        att.timeSinceAdRequested = this.timeSinceRequested.getDeltaTime()\n        att.timeSinceLastAdHeartbeat = this.timeSinceLastHeartbeat.getDeltaTime()\n      }\n      if (this.isStarted) att.timeSinceAdStarted = this.timeSinceStarted.getDeltaTime()\n      if (this.isPaused) att.timeSinceAdPaused = this.timeSincePaused.getDeltaTime()\n      if (this.isBuffering) att.timeSinceAdBufferBegin = this.timeSinceBufferBegin.getDeltaTime()\n      if (this.isSeeking) att.timeSinceAdSeekBegin = this.timeSinceSeekBegin.getDeltaTime()\n      if (this.isAdBreak) att.timeSinceAdBreakBegin = this.timeSinceAdBreakStart.getDeltaTime()\n      att.numberOfAds = this.numberOfAds\n    } else { // Content only\n      if (this.isRequested) {\n        att.timeSinceRequested = this.timeSinceRequested.getDeltaTime()\n        att.timeSinceLastHeartbeat = this.timeSinceLastHeartbeat.getDeltaTime()\n      }\n      if (this.isStarted) att.timeSinceStarted = this.timeSinceStarted.getDeltaTime()\n      if (this.isPaused) att.timeSincePaused = this.timeSincePaused.getDeltaTime()\n      if (this.isBuffering) att.timeSinceBufferBegin = this.timeSinceBufferBegin.getDeltaTime()\n      if (this.isSeeking) att.timeSinceSeekBegin = this.timeSinceSeekBegin.getDeltaTime()\n      att.timeSinceLastAd = this.timeSinceLastAd.getDeltaTime()\n      att.numberOfVideos = this.numberOfVideos\n    }\n    att.numberOfErrors = this.numberOfErrors\n\n    // Playtime\n    if (!this.isAd()) { // Content only\n      if (this.playtimeSinceLastEvent.startTime > 0) {\n        att.playtimeSinceLastEvent = this.playtimeSinceLastEvent.getDeltaTime()\n      } else {\n        att.playtimeSinceLastEvent = 0\n      }\n      if (this.isPlaying) {\n        this.playtimeSinceLastEvent.start()\n      } else {\n        this.playtimeSinceLastEvent.reset()\n      }\n      this.totalPlaytime += att.playtimeSinceLastEvent\n      att.totalPlaytime = this.totalPlaytime\n    }\n\n    for (const [key, value] of Object.entries(this.customTimeSinceAttributes)) {\n      att[key] = value.getDeltaTime()\n    }\n\n    return att\n  }\n\n  /**\n   * Calculate the bufferType attribute.\n   * \n   * @param {boolean} isInitialBuffering Is initial buffering event.\n   */\n  calculateBufferType(isInitialBuffering) {\n    let bufferType = ''\n    if (isInitialBuffering) {\n      bufferType = \"initial\";\n    }\n    else if (this.isSeeking) {\n      bufferType = \"seek\";\n    }\n    else if (this.isPaused) {\n      bufferType = \"pause\";\n    }\n    else {\n      // If none of the above is true, it is a connection buffering\n      bufferType = \"connection\";\n    }\n    Log.debug(\"Buffer Type = \" + bufferType)\n    \n    return bufferType\n  }\n\n  /**\n   * Augments view count. This will be called with each *_START and *_END.\n   */\n  goViewCountUp () {\n    this._viewCount++\n  }\n\n  /**\n   * Checks flags and changes state.\n   * @returns {boolean} True if the state changed.\n   */\n  goPlayerReady () {\n    if (!this.isPlayerReady) {\n      this.isPlayerReady = true\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * Checks flags and changes state\n   * @returns {boolean} True if the state changed.\n   */\n  goRequest () {\n    if (!this.isRequested) {\n      this.isRequested = true\n      this.timeSinceLastAd.reset()\n      this.timeSinceRequested.start()\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * Checks flags and changes state\n   * @returns {boolean} True if the state changed.\n   */\n  goStart () {\n    if (this.isRequested && !this.isStarted) {\n      if (this.isAd()) {\n        this.numberOfAds++\n      } else {\n        this.numberOfVideos++\n      }\n      this.isStarted = true\n      this.isPlaying = true\n      this.timeSinceStarted.start()\n      this.playtimeSinceLastEvent.start()\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * Checks flags and changes state\n   * @returns {boolean} True if the state changed.\n   */\n  goEnd () {\n    if (this.isRequested) {\n      this.numberOfErrors = 0\n      this.resetFlags()\n      this.timeSinceRequested.stop()\n      this.timeSinceStarted.stop()\n      this.playtimeSinceLastEvent.stop()\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * Checks flags and changes state\n   * @returns {boolean} True if the state changed.\n   */\n  goPause () {\n    if (this.isStarted && !this.isPaused) {\n      this.isPaused = true\n      this.isPlaying = false\n      this.timeSincePaused.start()\n      this.playtimeSinceLastEvent.stop()\n      this.timeSinceResumed.reset()\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * Checks flags and changes state\n   * @returns {boolean} True if the state changed.\n   */\n  goResume () {\n    if (this.isStarted && this.isPaused) {\n      this.isPaused = false\n      this.isPlaying = true\n      this.timeSincePaused.stop()\n      this.timeSinceResumed.start()\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * Checks flags and changes state\n   * @returns {boolean} True if the state changed.\n   */\n  goBufferStart () {\n    if (this.isRequested && !this.isBuffering) {\n      this.isBuffering = true\n      this.isPlaying = false\n      this.timeSinceBufferBegin.start()\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * Checks flags and changes state\n   * @returns {boolean} True if the state changed.\n   */\n  goBufferEnd () {\n    if (this.isRequested && this.isBuffering) {\n      this.isBuffering = false\n      this.isPlaying = true\n      this.timeSinceBufferBegin.stop()\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * Checks flags and changes state\n   * @returns {boolean} True if the state changed.\n   */\n  goSeekStart () {\n    if (this.isStarted && !this.isSeeking) {\n      this.isSeeking = true\n      this.isPlaying = false\n      this.timeSinceSeekBegin.start()\n      this.timeSinceSeekEnd.reset()\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * Checks flags and changes state\n   * @returns {boolean} True if the state changed.\n   */\n  goSeekEnd () {\n    if (this.isStarted && this.isSeeking) {\n      this.isSeeking = false\n      this.isPlaying = true\n      this.timeSinceSeekBegin.stop()\n      this.timeSinceSeekEnd.start()\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * Checks flags and changes state\n   * @returns {boolean} True if the state changed.\n   */\n  goAdBreakStart () {\n    if (!this.isAdBreak) {\n      this.isAdBreak = true\n      this.timeSinceAdBreakStart.start()\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * Checks flags and changes state\n   * @returns {boolean} True if the state changed.\n   */\n  goAdBreakEnd () {\n    if (this.isAdBreak) {\n      this.isRequested = false\n      this.isAdBreak = false\n      this.totalAdPlaytime = this.timeSinceAdBreakStart.getDeltaTime()\n      this.timeSinceAdBreakStart.stop()\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * Restarts download chrono.\n   */\n  goDownload () {\n    this.timeSinceLastDownload.start()\n  }\n\n  /**\n   * Restarts heartbeat chrono.\n   */\n  goHeartbeat () {\n    this.timeSinceLastHeartbeat.start()\n  }\n\n  /**\n   * Restarts rendition change chrono.\n   */\n  goRenditionChange () {\n    this.timeSinceLastRenditionChange.start()\n  }\n\n  /**\n   * Restarts ad quartile chrono.\n   */\n  goAdQuartile () {\n    this.timeSinceLastAdQuartile.start()\n  }\n\n  /**\n   * Increments error counter.\n   */\n  goError () {\n    this.numberOfErrors++\n  }\n\n  /**\n   * Restarts last ad chrono.\n   */\n  goLastAd () {\n    this.timeSinceLastAd.start()\n  }\n}\n\nexport default VideoTrackerState\n","import Log from './log'\nimport Tracker from './tracker'\nimport TrackerState from './videotrackerstate'\n\n/**\n * Base video tracker class provides extensible tracking over video elements. See {@link Tracker}.\n * Extend this class to create your own video tracker class. Override getter methods and\n * registerListeners/unregisterListeners to provide full integration with your video experience.\n *\n * @example\n * Tracker instances should be added to Core library to start sending data:\n * nrvideo.Core.addTracker(new Tracker())\n *\n * @extends Tracker\n */\nclass VideoTracker extends Tracker {\n  /**\n   * Constructor, receives player and options.\n   * Lifecycle: constructor > {@link setOptions} > {@link setPlayer} > {@link registerListeners}.\n   *\n   * @param {Object} [player] Player to track. See {@link setPlayer}.\n   * @param {Object} [options] Options for the tracker. See {@link setOptions}.\n   */\n  constructor (player, options) {\n    super()\n\n    /**\n     * TrackerState instance. Stores the state of the view. Tracker will automatically update the\n     * state of its instance, so there's no need to modify/interact with it manually.\n     * @type TrackerState\n     */\n    this.state = new TrackerState()\n\n    /**\n     * Another Tracker instance to track ads.\n     * @type Tracker\n     */\n    this.adsTracker = null\n\n    /**\n     * Last bufferType value.\n     * @private\n     */\n    this._lastBufferType = null\n\n    options = options || {}\n    this.setOptions(options)\n    if (player) this.setPlayer(player, options.tag)\n\n    Log.notice('Tracker ' + this.getTrackerName() + ' v' + this.getTrackerVersion() + ' is ready.')\n  }\n\n  /**\n   * Set options for the Tracker.\n   *\n   * @param {Object} [options] Options for the tracker.\n   * @param {Boolean} [options.isAd] True if the tracker is tracking ads. See {@link setIsAd}.\n   * @param {number} [options.heartbeat] Set time between heartbeats. See {@link heartbeat}.\n   * @param {Object} [options.customData] Set custom data. See {@link customData}.\n   * @param {Tracker} [options.parentTracker] Set parent tracker. See {@link parentTracker}.\n   * @param {Tracker} [options.adsTracker] Set ads tracker. See {@link adsTracker}.\n   * @param {Object} [options.tag] DOM element to track. See {@link setPlayer}.\n   */\n  setOptions (options) {\n    if (options) {\n      if (options.adsTracker) this.setAdsTracker(options.adsTracker)\n      if (typeof options.isAd === 'boolean') this.setIsAd(options.isAd)\n      Tracker.prototype.setOptions.apply(this, arguments)\n    }\n  }\n\n  /**\n   * Set a player and/or a tag. If there was one already defined, it will call dispose() first.\n   * Will call this.registerListeners() afterwards.\n   *\n   * @param {Object|string} player New player to save as this.player. If a string is passed,\n   * document.getElementById will be called.\n   * @param {DOMObject|string} [tag] Optional DOMElement to save as this.tag. If a string is passed,\n   * document.getElementById will be called.\n   */\n  setPlayer (player, tag) {\n    if (this.player || this.tag) this.dispose()\n\n    if (typeof document !== 'undefined' && document.getElementById) {\n      if (typeof player === 'string') player = document.getElementById(player)\n      if (typeof tag === 'string') tag = document.getElementById(tag)\n    }\n\n    tag = tag || player // if no tag is passed, use player as both.\n\n    this.player = player\n    this.tag = tag\n    this.registerListeners()\n  }\n\n  /** Returns true if the tracker is currently on ads. */\n  isAd () {\n    return this.state.isAd()\n  }\n\n  /** Sets if the tracker is currenlty tracking ads */\n  setIsAd (isAd) {\n    this.state.setIsAd(isAd)\n  }\n\n  /**\n   * Use this function to set up a child ad tracker. You will be able to access it using\n   * this.adsTracker.\n   *\n   * @param {Tracker} tracker Ad tracker to add\n   */\n  setAdsTracker (tracker) {\n    this.disposeAdsTracker() // dispose current one\n    if (tracker) {\n      this.adsTracker = tracker\n      this.adsTracker.setIsAd(true)\n      this.adsTracker.parentTracker = this\n      this.adsTracker.on('*', funnelAdEvents.bind(this))\n    }\n  }\n\n  /**\n   * Dispose current adsTracker.\n   */\n  disposeAdsTracker () {\n    if (this.adsTracker) {\n      this.adsTracker.off('*', funnelAdEvents)\n      this.adsTracker.dispose()\n    }\n  }\n\n  /**\n   * Prepares tracker to dispose. Calls unregisterListener and drops references to player and tag.\n   */\n  dispose () {\n    this.stopHeartbeat()\n    this.disposeAdsTracker()\n    this.unregisterListeners()\n    this.player = null\n    this.tag = null\n  }\n\n  /**\n   * Override this method to register listeners to player/tag.\n   * @example\n   * class SpecificTracker extends Tracker {\n   *  registerListeners() {\n   *    this.player.on('play', () => this.playHandler)\n   *  }\n   *\n   *  playHandler() {\n   *    this.send(VideoTracker.Events.REQUESTED)\n   *  }\n   * }\n   */\n  registerListeners () { }\n\n  /**\n   * Override this method to unregister listeners to player/tag created in registerListeners\n   * @example\n   * class SpecificTracker extends Tracker {\n   *  registerListeners() {\n   *    this.player.on('play', () => this.playHandler)\n   *  }\n   *\n   *  unregisterListeners() {\n   *    this.player.off('play', () => this.playHandler)\n   *  }\n   *\n   *  playHandler() {\n   *    this.send(VideoTracker.Events.REQUESTED)\n   *  }\n   * }\n   */\n  unregisterListeners () { }\n\n  /**\n   * Trackers will generate unique id's for every new video iteration. If you have your own unique\n   * view value, you can override this method to return it.\n   * If the tracker has a parentTracker defined, parent viewId will be used.\n   */\n  getViewId () {\n    if (this.parentTracker) {\n      return this.parentTracker.getViewId()\n    } else {\n      return this.state.getViewId()\n    }\n  }\n\n  /**\n   * Trackers will generate unique id's for every new video session. If you have your own unique\n   * view value, you can override this method to return it.\n   * If the tracker has a parentTracker defined, parent viewId will be used.\n   */\n  getViewSession () {\n    if (this.parentTracker) {\n      return this.parentTracker.getViewSession()\n    } else {\n      return this.state.getViewSession()\n    }\n  }\n\n  /** Override to return the Id of the video. */\n  getVideoId () {\n    return null\n  }\n\n  /** Override to return Title of the video. */\n  getTitle () {\n    return null\n  }\n\n  /** Override to return True if the video is live. */\n  isLive () {\n    return null\n  }\n\n  /** Override to return Bitrate (in bits) of the video. */\n  getBitrate () {\n    return null\n  }\n\n  /** Calculates consumed bitrate using webkitVideoDecodedByteCount. */\n  getWebkitBitrate () {\n    if (this.tag && this.tag.webkitVideoDecodedByteCount) {\n      let bitrate\n      if (this._lastWebkitBitrate) {\n        bitrate = this.tag.webkitVideoDecodedByteCount\n        let delta = bitrate - this._lastWebkitBitrate\n        let seconds = this.getHeartbeat() / 1000\n        bitrate = Math.round((delta / seconds) * 8)\n      }\n      this._lastWebkitBitrate = this.tag.webkitVideoDecodedByteCount\n      return bitrate || null\n    }\n  }\n\n  /** Override to return Name of the rendition (ie: 1080p). */\n  getRenditionName () {\n    return null\n  }\n\n  /** Override to return Target Bitrate of the rendition. */\n  getRenditionBitrate () {\n    return null\n  }\n\n  /**\n   * This method will return 'up', 'down' or null depending on if the bitrate of the rendition\n   * have changed from the last time it was called.\n   *\n   * @param {boolean} [saveNewRendition=false] If true, current rendition will be stored to be used\n   * the next time this method is called. This allows you to call this.getRenditionShift() without\n   * saving the current rendition and thus preventing interferences with RENDITION_CHANGE events.\n   */\n  getRenditionShift (saveNewRendition) {\n    let current = this.getRenditionBitrate()\n    let last\n    if (this.isAd()) {\n      last = this._lastAdRendition\n      if (saveNewRendition) this._lastAdRendition = current\n    } else {\n      last = this._lastRendition\n      if (saveNewRendition) this._lastRendition = current\n    }\n\n    if (!current || !last) {\n      return null\n    } else {\n      if (current > last) {\n        return 'up'\n      } else if (current < last) {\n        return 'down'\n      } else {\n        return null\n      }\n    }\n  }\n\n  /** Override to return renidtion actual Height (before re-scaling). */\n  getRenditionHeight () {\n    return this.tag ? this.tag.videoHeight : null\n  }\n\n  /** Override to return rendition actual Width (before re-scaling). */\n  getRenditionWidth () {\n    return this.tag ? this.tag.videoWidth : null\n  }\n\n  /** Override to return Duration of the video, in ms. */\n  getDuration () {\n    return this.tag ? this.tag.duration : null\n  }\n\n  /** Override to return Playhead (currentTime) of the video, in ms. */\n  getPlayhead () {\n    return this.tag ? this.tag.currentTime : null\n  }\n\n  /**\n   * Override to return Language of the video. We recommend using locale notation, ie: en_US.\n   * {@see https://gist.github.com/jacobbubu/1836273}\n   */\n  getLanguage () {\n    return null\n  }\n\n  /** Override to return URL of the resource being played. */\n  getSrc () {\n    return this.tag ? this.tag.currentSrc : null\n  }\n\n  /** Override to return Playrate (speed) of the video. ie: 1.0, 0.5, 1.25... */\n  getPlayrate () {\n    return this.tag ? this.tag.playbackRate : null\n  }\n\n  /** Override to return True if the video is currently muted. */\n  isMuted () {\n    return this.tag ? this.tag.muted : null\n  }\n\n  /** Override to return True if the video is currently fullscreen. */\n  isFullscreen () {\n    return null\n  }\n\n  /** Override to return the CDN serving the content. */\n  getCdn () {\n    return null\n  }\n\n  /** Override to return the Name of the player. */\n  getPlayerName () {\n    return this.getTrackerName()\n  }\n\n  /** Override to return the Version of the player. */\n  getPlayerVersion () {\n    return null\n  }\n\n  /** Override to return current FPS (Frames per second). */\n  getFps () {\n    return null\n  }\n\n  /**\n   * Override to return if the player was autoplayed. By default: this.tag.autoplay\n   */\n  isAutoplayed () {\n    return this.tag ? this.tag.autoplay : null\n  }\n\n  /**\n   * Override to return the player preload attribute. By default: this.tag.preload\n   */\n  getPreload () {\n    return this.tag ? this.tag.preload : null\n  }\n\n  // Only for ads\n  /**\n   * Override to return Quartile of the ad. 0 before first, 1 after first quartile, 2 after\n   * midpoint, 3 after third quartile, 4 when completed.\n   */\n  getAdQuartile () {\n    return null\n  }\n\n  /**\n   * Override to return the position of the ad. Use {@link Constants.AdPositions} enum\n   * to fill this data.\n   */\n  getAdPosition () {\n    if (this.parentTracker) {\n      return this.parentTracker.state.isStarted ? 'mid' : 'pre'\n    }\n    else {\n      return null\n    }\n  }\n\n  /**\n   * Override to return the ad partner. ie: ima, freewheel...\n   */\n  getAdPartner () {\n    return null\n  }\n\n  /**\n   * Override to return the creative id of the ad.\n   */\n  getAdCreativeId () {\n    return null\n  }\n\n  /**\n   * Do NOT override. This method fills all the appropiate attributes for tracked video.\n   *\n   * @param {object} [att] Collection of key value attributes\n   * @return {object} Filled attributes\n   * @final\n   */\n  getAttributes (att) {\n    att = Tracker.prototype.getAttributes.apply(this, arguments)\n\n    if (typeof att.isAd === 'undefined') att.isAd = this.isAd()\n    att.viewSession = this.getViewSession()\n    att.viewId = this.getViewId()\n    att.playerName = this.getPlayerName()\n    att.playerVersion = this.getPlayerVersion()\n\n    try {\n      att.pageUrl = window.location.href\n    } catch (err) { /* skip */ }\n\n    if (this.isAd()) { // Ads\n      att.adId = this.getVideoId()\n      att.adTitle = this.getTitle()\n      att.adBitrate = this.getBitrate() || this.getWebkitBitrate()\n      att.adRenditionName = this.getRenditionName()\n      att.adRenditionBitrate = this.getRenditionBitrate()\n      att.adRenditionHeight = this.getRenditionHeight()\n      att.adRenditionWidth = this.getRenditionWidth()\n      att.adDuration = this.getDuration()\n      att.adPlayhead = this.getPlayhead()\n      att.adLanguage = this.getLanguage()\n      att.adSrc = this.getSrc()\n      att.adCdn = this.getCdn()\n      att.adIsMuted = this.isMuted()\n      att.adFps = this.getFps()\n      // ad exclusives\n      att.adQuartile = this.getAdQuartile()\n      att.adPosition = this.getAdPosition()\n      att.adCreativeId = this.getAdCreativeId()\n      att.adPartner = this.getAdPartner()\n    } else { // no ads\n      att.contentId = this.getVideoId()\n      att.contentTitle = this.getTitle()\n      att.contentIsLive = this.isLive()\n      att.contentBitrate = this.getBitrate() || this.getWebkitBitrate()\n      att.contentRenditionName = this.getRenditionName()\n      att.contentRenditionBitrate = this.getRenditionBitrate()\n      att.contentRenditionHeight = this.getRenditionHeight()\n      att.contentRenditionWidth = this.getRenditionWidth()\n      att.contentDuration = this.getDuration()\n      att.contentPlayhead = this.getPlayhead()\n      att.contentLanguage = this.getLanguage()\n      att.contentSrc = this.getSrc()\n      att.contentPlayrate = this.getPlayrate()\n      att.contentIsFullscreen = this.isFullscreen()\n      att.contentIsMuted = this.isMuted()\n      att.contentCdn = this.getCdn()\n      att.contentIsAutoplayed = this.isAutoplayed()\n      att.contentPreload = this.getPreload()\n      att.contentFps = this.getFps()\n      if (this.adsTracker != null && this.adsTracker.state.totalAdPlaytime > 0) {\n        att.totalAdPlaytime = this.adsTracker.state.totalAdPlaytime;\n      }\n    }\n\n    this.state.getStateAttributes(att)\n\n    for (let key in this.customData) {\n      att[key] = this.customData[key]\n    }\n\n    return att\n  }\n\n  /**\n   * Sends custom event and registers a timeSince attribute.\n   * @param {Object} [actionName] Custom action name.\n   * @param {Object} [timeSinceAttName] Custom timeSince attribute name.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   */\n  sendCustom (actionName, timeSinceAttName, att) {\n    att = att || {}\n    this.send(actionName, att)\n    this.state.setTimeSinceAttribute(timeSinceAttName)\n  }\n\n  /**\n   * Sends associated event and changes view state. An internal state machine will prevent\n   * duplicated events. Should be associated to an event using registerListeners.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   */\n  sendPlayerReady (att) {\n    if (this.state.goPlayerReady()) {\n      att = att || {}\n      this.send(VideoTracker.Events.PLAYER_READY, att)\n    }\n  }\n\n  /**\n   * Sends associated event and changes view state. An internal state machine will prevent\n   * duplicated events. Should be associated to an event using registerListeners. Calls\n   * {@link startHeartbeat}.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   */\n  sendRequest (att) {\n    if (this.state.goRequest()) {\n      this.state.goViewCountUp()\n      let ev = this.isAd() ? VideoTracker.Events.AD_REQUEST : VideoTracker.Events.CONTENT_REQUEST\n      this.send(ev, att)\n      this.startHeartbeat()\n      this.state.goHeartbeat()\n    }\n  }\n\n  /**\n   * Sends associated event and changes view state. An internal state machine will prevent\n   * duplicated events. Should be associated to an event using registerListeners.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   */\n  sendStart (att) {\n    if (this.state.goStart()) {\n      let ev\n      if (this.isAd()) {\n        ev = VideoTracker.Events.AD_START\n        if (this.parentTracker) this.parentTracker.state.isPlaying = false\n      } else {\n        ev = VideoTracker.Events.CONTENT_START\n      }\n      this.send(ev, att)\n    }\n  }\n\n  /**\n   * Sends associated event and changes view state. An internal state machine will prevent\n   * duplicated events. Should be associated to an event using registerListeners. Calls\n   * {@link stopHeartbeat}.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   */\n  sendEnd (att) {\n    if (this.state.goEnd()) {\n      att = att || {}\n      let ev\n      if (this.isAd()) {\n        ev = VideoTracker.Events.AD_END\n        att.timeSinceAdRequested = this.state.timeSinceRequested.getDeltaTime()\n        att.timeSinceAdStarted = this.state.timeSinceStarted.getDeltaTime()\n        if (this.parentTracker) this.parentTracker.state.isPlaying = true\n      } else {\n        ev = VideoTracker.Events.CONTENT_END\n        att.timeSinceRequested = this.state.timeSinceRequested.getDeltaTime()\n        att.timeSinceStarted = this.state.timeSinceStarted.getDeltaTime()\n      }\n      this.stopHeartbeat()\n      this.send(ev, att)\n      if (this.parentTracker && this.isAd()) this.parentTracker.state.goLastAd()\n      this.state.goViewCountUp()\n      this.state.totalPlaytime = 0\n    }\n  }\n\n  /**\n   * Sends associated event and changes view state. An internal state machine will prevent\n   * duplicated events. Should be associated to an event using registerListeners.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   */\n  sendPause (att) {\n    if (this.state.goPause()) {\n      let ev = this.isAd() ? VideoTracker.Events.AD_PAUSE : VideoTracker.Events.CONTENT_PAUSE\n      this.send(ev, att)\n    }\n  }\n\n  /**\n   * Sends associated event and changes view state. An internal state machine will prevent\n   * duplicated events. Should be associated to an event using registerListeners.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   */\n  sendResume (att) {\n    if (this.state.goResume()) {\n      att = att || {}\n      let ev\n      if (this.isAd()) {\n        ev = VideoTracker.Events.AD_RESUME\n        att.timeSinceAdPaused = this.state.timeSincePaused.getDeltaTime()\n      } else {\n        ev = VideoTracker.Events.CONTENT_RESUME\n        att.timeSincePaused = this.state.timeSincePaused.getDeltaTime()\n      }\n      this.send(ev, att)\n    }\n  }\n\n  /**\n   * Sends associated event and changes view state. An internal state machine will prevent\n   * duplicated events. Should be associated to an event using registerListeners.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   */\n  sendBufferStart (att) {\n    if (this.state.goBufferStart()) {\n      att = att || {}\n      let ev\n      if (this.isAd()) {\n        ev = VideoTracker.Events.AD_BUFFER_START\n      } else {\n        ev = VideoTracker.Events.CONTENT_BUFFER_START\n      }\n\n      att = this.buildBufferAttributes(att)\n      this._lastBufferType = att.bufferType\n      \n      this.send(ev, att)\n    }\n  }\n\n  /**\n   * Sends associated event and changes view state. An internal state machine will prevent\n   * duplicated events. Should be associated to an event using registerListeners.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   */\n  sendBufferEnd (att) {\n    if (this.state.goBufferEnd()) {\n      att = att || {}\n      let ev\n      if (this.isAd()) {\n        ev = VideoTracker.Events.AD_BUFFER_END\n        att.timeSinceAdBufferBegin = this.state.timeSinceBufferBegin.getDeltaTime()\n      } else {\n        ev = VideoTracker.Events.CONTENT_BUFFER_END\n        att.timeSinceBufferBegin = this.state.timeSinceBufferBegin.getDeltaTime()\n      }\n\n      att = this.buildBufferAttributes(att)\n      // Set the bufferType attribute of the last BUFFER_START\n      if (this._lastBufferType != null) {\n        att.bufferType = this._lastBufferType\n      }\n\n      this.send(ev, att)\n      this.state.initialBufferingHappened = true\n    }\n  }\n  \n  buildBufferAttributes(att) {\n    if (att.timeSinceStarted == undefined || att.timeSinceStarted < 100) {\n      att.isInitialBuffering = !this.state.initialBufferingHappened\n    }\n    else {\n      att.isInitialBuffering = false\n    }\n\n    att.bufferType = this.state.calculateBufferType(att.isInitialBuffering)\n    \n    att.timeSinceResumed = this.state.timeSinceResumed.getDeltaTime()\n    att.timeSinceSeekEnd = this.state.timeSinceSeekEnd.getDeltaTime()\n\n    return att\n  }\n\n  /**\n   * Sends associated event and changes view state. An internal state machine will prevent\n   * duplicated events. Should be associated to an event using registerListeners.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   */\n  sendSeekStart (att) {\n    if (this.state.goSeekStart()) {\n      let ev\n      if (this.isAd()) {\n        ev = VideoTracker.Events.AD_SEEK_START\n      } else {\n        ev = VideoTracker.Events.CONTENT_SEEK_START\n      }\n      this.send(ev, att)\n    }\n  }\n\n  /**\n   * Sends associated event and changes view state. An internal state machine will prevent\n   * duplicated events. Should be associated to an event using registerListeners.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   */\n  sendSeekEnd (att) {\n    if (this.state.goSeekEnd()) {\n      att = att || {}\n      let ev\n      if (this.isAd()) {\n        ev = VideoTracker.Events.AD_SEEK_END\n        att.timeSinceAdSeekBegin = this.state.timeSinceSeekBegin.getDeltaTime()\n      } else {\n        ev = VideoTracker.Events.CONTENT_SEEK_END\n        att.timeSinceSeekBegin = this.state.timeSinceSeekBegin.getDeltaTime()\n      }\n      this.send(ev, att)\n    }\n  }\n\n  /**\n   * Sends associated event and changes view state. An internal state machine will prevent\n   * duplicated events. Should be associated to an event using registerListeners.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   * @param {String} att.state Download requires a string to distinguish different states.\n   */\n  sendDownload (att) {\n    att = att || {}\n    if (!att.state) Log.warn('Called sendDownload without { state: xxxxx }.')\n    this.send(VideoTracker.Events.DOWNLOAD, att)\n    this.state.goDownload()\n  }\n\n  /**\n   * Sends associated event and changes view state. An internal state machine will prevent\n   * duplicated events. Should be associated to an event using registerListeners.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   */\n  sendError (att) {\n    att = att || {}\n    att.isAd = true\n    this.state.goError()\n    let ev = this.isAd() ? VideoTracker.Events.AD_ERROR : VideoTracker.Events.CONTENT_ERROR\n    this.send(ev, att)\n  }\n\n  /**\n   * Sends associated event and changes view state. An internal state machine will prevent\n   * duplicated events. Should be associated to an event using registerListeners.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   */\n  sendRenditionChanged (att) {\n    att = att || {}\n    att.timeSinceLastRenditionChange = this.state.timeSinceLastRenditionChange.getDeltaTime()\n    att.shift = this.getRenditionShift(true)\n    let ev\n    if (this.isAd()) {\n      ev = VideoTracker.Events.AD_RENDITION_CHANGE\n    } else {\n      ev = VideoTracker.Events.CONTENT_RENDITION_CHANGE\n    }\n    this.send(ev, att)\n    this.state.goRenditionChange()\n  }\n\n  /**\n   * Sends associated event and changes view state. Heartbeat will automatically be sent every\n   * 10 seconds. There's no need to call this manually.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   * @param {number} att.url Url of the clicked ad.\n   *\n   */\n  sendHeartbeat (att) {\n    if (this.state.isRequested) {\n      let ev\n      if (this.isAd()) {\n        ev = VideoTracker.Events.AD_HEARTBEAT\n      } else {\n        ev = VideoTracker.Events.CONTENT_HEARTBEAT\n      }\n      this.send(ev, att)\n      this.state.goHeartbeat()\n    }\n  }\n\n  // Only ads\n  /**\n   * Sends associated event and changes view state. An internal state machine will prevent\n   * duplicated events. Should be associated to an event using registerListeners.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   */\n  sendAdBreakStart (att) {\n    if (this.isAd() && this.state.goAdBreakStart()) {\n      this.state.totalAdPlaytime = 0;\n      if (this.parentTracker) this.parentTracker.state.isPlaying = false\n      this.send(VideoTracker.Events.AD_BREAK_START, att)\n    }\n  }\n\n  /**\n   * Sends associated event and changes view state. An internal state machine will prevent\n   * duplicated events. Should be associated to an event using registerListeners.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   */\n  sendAdBreakEnd (att) {\n    if (this.isAd() && this.state.goAdBreakEnd()) {\n      att = att || {}\n      att.timeSinceAdBreakBegin = this.state.timeSinceAdBreakStart.getDeltaTime()\n      this.send(VideoTracker.Events.AD_BREAK_END, att)\n      // Just in case AD_END not arriving, because of an AD_ERROR\n      if (this.parentTracker) this.parentTracker.state.isPlaying = true\n      this.stopHeartbeat()\n      if (this.parentTracker && this.isAd()) this.parentTracker.state.goLastAd()\n    }\n  }\n\n  /**\n   * Sends associated event and changes view state. An internal state machine will prevent\n   * duplicated events. Should be associated to an event using registerListeners.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   * @param {number} att.quartile Number of the quartile.\n   */\n  sendAdQuartile (att) {\n    if (this.isAd()) {\n      att = att || {}\n      if (!att.quartile) Log.warn('Called sendAdQuartile without { quartile: xxxxx }.')\n      att.timeSinceLastAdQuartile = this.state.timeSinceLastAdQuartile.getDeltaTime()\n      this.send(VideoTracker.Events.AD_QUARTILE, att)\n      this.state.goAdQuartile()\n    }\n  }\n\n  /**\n   * Sends associated event and changes view state. An internal state machine will prevent\n   * duplicated events. Should be associated to an event using registerListeners.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   * @param {number} att.url Url of the clicked ad.\n   */\n  sendAdClick (att) {\n    if (this.isAd()) {\n      att = att || {}\n      if (!att.url) Log.warn('Called sendAdClick without { url: xxxxx }.')\n      this.send(VideoTracker.Events.AD_CLICK, att)\n    }\n  }\n}\n\n/**\n * Enumeration of events fired by this class.\n *\n * @static\n * @memberof VideoTracker\n * @enum {String}\n */\nVideoTracker.Events = {\n  // Player\n  /** The player is ready to start sending events. */\n  PLAYER_READY: 'PLAYER_READY',\n  /** Downloading data. */\n  DOWNLOAD: 'DOWNLOAD',\n  /** An error happened */\n  ERROR: 'ERROR',\n\n  // Video\n  /** Content video has been requested. */\n  CONTENT_REQUEST: 'CONTENT_REQUEST',\n  /** Content video started (first frame shown). */\n  CONTENT_START: 'CONTENT_START',\n  /** Content video ended. */\n  CONTENT_END: 'CONTENT_END',\n  /** Content video paused. */\n  CONTENT_PAUSE: 'CONTENT_PAUSE',\n  /** Content video resumed. */\n  CONTENT_RESUME: 'CONTENT_RESUME',\n  /** Content video seek started */\n  CONTENT_SEEK_START: 'CONTENT_SEEK_START',\n  /** Content video seek ended. */\n  CONTENT_SEEK_END: 'CONTENT_SEEK_END',\n  /** Content video beffering started */\n  CONTENT_BUFFER_START: 'CONTENT_BUFFER_START',\n  /** Content video buffering ended */\n  CONTENT_BUFFER_END: 'CONTENT_BUFFER_END',\n  /** Content video heartbeat, en event that happens once every 30 seconds while the video is playing. */\n  CONTENT_HEARTBEAT: 'CONTENT_HEARTBEAT',\n  /** Content video stream qwuality changed. */\n  CONTENT_RENDITION_CHANGE: 'CONTENT_RENDITION_CHANGE',\n  /** Content video error. */\n  CONTENT_ERROR: 'CONTENT_ERROR',\n\n  // Ads only\n  /** Ad video has been requested. */\n  AD_REQUEST: 'AD_REQUEST',\n  /** Ad video started (first frame shown). */\n  AD_START: 'AD_START',\n  /** Ad video ended. */\n  AD_END: 'AD_END',\n  /** Ad video paused. */\n  AD_PAUSE: 'AD_PAUSE',\n  /** Ad video resumed. */\n  AD_RESUME: 'AD_RESUME',\n  /** Ad video seek started */\n  AD_SEEK_START: 'AD_SEEK_START',\n  /** Ad video seek ended */\n  AD_SEEK_END: 'AD_SEEK_END',\n  /** Ad video beffering started */\n  AD_BUFFER_START: 'AD_BUFFER_START',\n  /** Ad video beffering ended */\n  AD_BUFFER_END: 'AD_BUFFER_END',\n  /** Ad video heartbeat, en event that happens once every 30 seconds while the video is playing. */\n  AD_HEARTBEAT: 'AD_HEARTBEAT',\n  /** Ad video stream qwuality changed. */\n  AD_RENDITION_CHANGE: 'AD_RENDITION_CHANGE',\n  /** Ad video error. */\n  AD_ERROR: 'AD_ERROR',\n  /** Ad break (a block of ads) started. */\n  AD_BREAK_START: 'AD_BREAK_START',\n  /** Ad break ended. */\n  AD_BREAK_END: 'AD_BREAK_END',\n  /** Ad quartile happened. */\n  AD_QUARTILE: 'AD_QUARTILE',\n  /** Ad has been clicked. */\n  AD_CLICK: 'AD_CLICK'\n}\n\n// Private members\nfunction funnelAdEvents (e) {\n  this.send(e.type, e.data)\n}\n\nexport default VideoTracker\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(954);\n"],"names":["root","factory","exports","module","define","amd","self","e","nrvideo","r","__esModule","default","t","_getRequireWildcardCache","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireWildcard","require","_tracker","WeakMap","DashTracker","Tracker","_package","VideoTracker","setPlayer","player","tag","prototype","this","getTrackerName","getTrackerVersion","version","isLive","isDynamic","getSrc","getSource","getPlayrate","getPlaybackRate","getDuration","duration","getTrack","getCurrentTrackFor","getLanguage","lang","getDashBitrate","type","videoBitrate","getQualityFor","getBitrateInfoListFor","getRenditionBitrate","currentBitrate","bitrate","getRenditionWidth","width","getRenditionHeight","height","getPlayerVersion","getVersion","getPreload","preload","isMuted","isAutoplayed","getAutoPlay","registerListeners","Log","debugCommonVideoEvents","on","onReady","bind","onDownload","onPlay","onPlaying","onPause","onSeeking","onSeeked","onError","onEnded","onBufferingStalled","onBufferingLoaded","onAdaptation","unregisterListeners","off","sendPlayerReady","sendDownload","state","sendRequest","sendResume","sendStart","sendRenditionChanged","sendBufferStart","sendBufferEnd","sendPause","sendSeekStart","sendSeekEnd","sendError","error","message","sendEnd","constructor","_attributes","send","event","data","assign","setAttribute","key","value","setAttributes","attr","append","msg","_report","Levels","ERROR","warn","WARNING","notice","slice","arguments","NOTICE","debug","DEBUG","o","extraEvents","report","level","playerEvents","shift","concat","length","window","addEventListener","addEventHandler","err","color","d","logMethod","prefix","includeTime","Date","getDate","getMinutes","getSeconds","getMilliseconds","_getCurrentTime","_letters","_level2letter","SILENT","colorful","document","documentMode","_plainReport","console","undefined","cast","log","splice","apply","Array","m","ALL","location","search","exec","_loadLevelFromUrl","NRInsightsBackend","accountId","apiKey","eventType","super","_accountId","_apiKey","_eventType","_eventBuffer","_harvestLocked","_lastTimestamp","setInterval","harvestHandler","Source","TIMER","generateAttributes","timestamp","now","push","href","origin","pathname","referrer","OSName","navigator","userAgent","indexOf","match","agentName","deviceType","source","pushEventToInsights","pop","ev","requestOptions","method","headers","body","JSON","stringify","url","fetch","then","response","json","insightsRequestResponse","catch","FETCH","Core","addTracker","tracker","emit","trackers","eventHandler","trackerInit","removeTracker","dispose","index","getTrackers","getBackend","setBackend","backendInstance","newrelic","addPageAction","isErrorShown","att","ret","cleanData","Constants","AdPositions","PRE","MID","POST","Chrono","reset","startTime","stopTime","offset","getDeltaTime","getTime","start","stop","clone","chrono","callback","_listeners","isArray","forEach","target","options","customData","heartbeat","parentTracker","_trackerReadyChrono","setOptions","getHeartbeat","startHeartbeat","_heartbeatInterval","sendHeartbeat","Math","max","stopHeartbeat","clearInterval","Events","HEARTBEAT","getAttributes","trackerName","trackerVersion","coreVersion","timeSinceTrackerReady","hidden","isBackgroundEvent","_createdAt","_viewSession","_viewCount","_isAd","numberOfErrors","numberOfAds","numberOfVideos","totalPlaytime","totalAdPlaytime","isAdBreak","initialBufferingHappened","resetFlags","resetChronos","isPlayerReady","isRequested","isStarted","isPaused","isSeeking","isBuffering","isPlaying","timeSinceRequested","timeSinceStarted","timeSincePaused","timeSinceSeekBegin","timeSinceBufferBegin","timeSinceAdBreakStart","timeSinceLastDownload","timeSinceLastHeartbeat","timeSinceLastRenditionChange","timeSinceLastAdQuartile","timeSinceLastAd","timeSinceResumed","timeSinceSeekEnd","playtimeSinceLastEvent","customTimeSinceAttributes","isAd","setIsAd","setTimeSinceAttribute","name","removeTimeSinceAttribute","getViewSession","time","random","toString","substring","getViewId","getStateAttributes","timeSinceAdRequested","timeSinceLastAdHeartbeat","timeSinceAdStarted","timeSinceAdPaused","timeSinceAdBufferBegin","timeSinceAdSeekBegin","timeSinceAdBreakBegin","entries","calculateBufferType","isInitialBuffering","bufferType","goViewCountUp","goPlayerReady","goRequest","goStart","goEnd","goPause","goResume","goBufferStart","goBufferEnd","goSeekStart","goSeekEnd","goAdBreakStart","goAdBreakEnd","goDownload","goHeartbeat","goRenditionChange","goAdQuartile","goError","goLastAd","adsTracker","_lastBufferType","setAdsTracker","getElementById","disposeAdsTracker","funnelAdEvents","getVideoId","getTitle","getBitrate","getWebkitBitrate","webkitVideoDecodedByteCount","_lastWebkitBitrate","delta","seconds","round","getRenditionName","getRenditionShift","saveNewRendition","last","current","_lastAdRendition","_lastRendition","videoHeight","videoWidth","getPlayhead","currentTime","currentSrc","playbackRate","muted","isFullscreen","getCdn","getPlayerName","getFps","autoplay","getAdQuartile","getAdPosition","getAdPartner","getAdCreativeId","viewSession","viewId","playerName","playerVersion","pageUrl","adId","adTitle","adBitrate","adRenditionName","adRenditionBitrate","adRenditionHeight","adRenditionWidth","adDuration","adPlayhead","adLanguage","adSrc","adCdn","adIsMuted","adFps","adQuartile","adPosition","adCreativeId","adPartner","contentId","contentTitle","contentIsLive","contentBitrate","contentRenditionName","contentRenditionBitrate","contentRenditionHeight","contentRenditionWidth","contentDuration","contentPlayhead","contentLanguage","contentSrc","contentPlayrate","contentIsFullscreen","contentIsMuted","contentCdn","contentIsAutoplayed","contentPreload","contentFps","sendCustom","actionName","timeSinceAttName","PLAYER_READY","AD_REQUEST","CONTENT_REQUEST","AD_START","CONTENT_START","AD_END","CONTENT_END","AD_PAUSE","CONTENT_PAUSE","AD_RESUME","CONTENT_RESUME","AD_BUFFER_START","CONTENT_BUFFER_START","buildBufferAttributes","AD_BUFFER_END","CONTENT_BUFFER_END","AD_SEEK_START","CONTENT_SEEK_START","AD_SEEK_END","CONTENT_SEEK_END","DOWNLOAD","AD_ERROR","CONTENT_ERROR","AD_RENDITION_CHANGE","CONTENT_RENDITION_CHANGE","AD_HEARTBEAT","CONTENT_HEARTBEAT","sendAdBreakStart","AD_BREAK_START","sendAdBreakEnd","AD_BREAK_END","sendAdQuartile","quartile","AD_QUARTILE","sendAdClick","AD_CLICK","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","definition","enumerable","obj","prop","Symbol","toStringTag"],"sourceRoot":""}