name: Build and Generate Assets

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'  # Match your project's Node.js version

    - name: Install dependencies
      run: npm install

    - name: Build project
      run: npm run build

    - name: Ensure build files exist
      run: |
        ls -l dist
        zip -r dist.zip dist/  # Create a zip archive of the `dist` directory

    - name: Check for existing release
      id: check_release
      uses: actions/github-script@v4
      with:
        script: |
          try {
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: "${{ github.ref_name }}",
            });
            return {
              id: release.data.id,
              exists: true
            };
          } catch (error) {
            if (error.status === 404) {
              return {
                exists: false
              };
            }
            throw error;
          }

    - name: Create or Update GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        files: dist.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: steps.check_release.outputs.exists == 'false'

    - name: Update Existing Release
      if: steps.check_release.outputs.exists == 'true'
      uses: actions/github-script@v4
      with:
        script: |
          const releaseId = ${{ steps.check_release.outputs.id }};
          const uploadUrl = `https://uploads.github.com/repos/${context.repo.owner}/${context.repo.repo}/releases/${releaseId}/assets?name=dist.zip`;
          await github.rest.repos.uploadReleaseAsset({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: releaseId,
            name: "dist.zip",
            data: fs.readFileSync('dist.zip'),
            headers: {
              "content-type": "application/zip",
              "content-length": fs.statSync('dist.zip').size,
            },
          });
          core.info('Updated existing release with new assets.');