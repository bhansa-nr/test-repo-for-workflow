name: Build and Generate Assets

on:
  push:
    tags:
      - 'v*.*.*' # Triggers on version tags like v1.0.0

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'  # Specify the Node.js version you need

    - name: Install dependencies
      run: npm install

    - name: Build project
      run: npm run build

    - name: Archive build files
      run: |
        if [ -d "dist" ]; then
          zip -r dist.zip dist/
        else
          echo "No dist folder found"; exit 1
        fi

    - name: Check for existing release
      id: check_release
      uses: actions/github-script@v4
      with:
        script: |
          try {
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: context.ref.replace('refs/tags/', ''),
            });
            return {
              exists: true,
              id: release.data.id,
            };
          } catch (error) {
            if (error.status === 404) {
              return { exists: false };
            }
            throw error;
          }

    - name: Create or Update GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: steps.check_release.outputs.exists == 'false'

    - name: Upload to Existing Release
      if: steps.check_release.outputs.exists == 'true'
      uses: actions/github-script@v4
      with:
        script: |
          const fs = require('fs');
          const releaseId = ${{ steps.check_release.outputs.id }};
          const headers = { 'content-type': 'application/zip', 'content-length': fs.statSync('dist.zip').size };

          const response = await github.rest.repos.uploadReleaseAsset({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: releaseId,
            name: 'dist.zip',
            data: fs.createReadStream('dist.zip'),
            headers: headers,
          });

          core.info(`Asset uploaded: ${response.data.browser_download_url}`);